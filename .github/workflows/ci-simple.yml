# DevOps Learning - Simple CI/CD Pipeline
# This is a simplified version for learning purposes

name: Simple CI/CD Pipeline

# When to run this pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  NODE_VERSION: '20'

# Jobs to run
jobs:
  # Job 1: Code Quality Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: VKApp/package-lock.json
      
      # Step 3: Install dependencies
      - name: Install dependencies
        working-directory: ./VKApp
        run: npm ci --ignore-scripts
      
      # Step 4: Run linting
      - name: Run ESLint
        working-directory: ./VKApp
        run: npm run lint
      
      # Step 5: Run TypeScript check
      - name: Run TypeScript check
        working-directory: ./VKApp
        run: npm run type-check

  # Job 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: VKApp/package-lock.json
      
      - name: Install dependencies
        working-directory: ./VKApp
        run: npm ci --ignore-scripts
      
      - name: Run tests
        working-directory: ./VKApp
        run: npm test -- --passWithNoTests

  # Job 3: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]  # Only run if previous jobs succeed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: VKApp/package-lock.json
      
      - name: Install dependencies
        working-directory: ./VKApp
        run: npm ci --ignore-scripts
      
      - name: Build web version
        working-directory: ./VKApp
        run: npm run build:web
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: VKApp/dist/

  # Job 4: Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: VKApp/dist/
      
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Build artifacts are ready in VKApp/dist/"
          echo "In a real scenario, this would deploy to your staging server"
      
      - name: Notify deployment
        run: |
          echo "âœ… Staging deployment completed!"
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # Job 5: Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: VKApp/dist/
      
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "Build artifacts are ready in VKApp/dist/"
          echo "In a real scenario, this would deploy to your production server"
      
      - name: Notify deployment
        run: |
          echo "âœ… Production deployment completed!"
          echo "Environment: production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
